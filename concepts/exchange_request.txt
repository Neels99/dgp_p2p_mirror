Создание заявки и помещение её в шарчейн, установка параметра времени жизни заявки.

Softfork:
1. Bob желает сделать заявку на продажу и пишет команду создания заявки, указывая обязательные параметры.
2. p2pool создает dict по указанным параметрам. Данные dict:
	1) Хэш предыдущей шары с заявкой [если поле пустое, то это первичная заявка продавца]
	2) Хэш текущей шары.
	3) Хэш самой заявки [это поле не хэшируется, а идёт отдельно]
	4) Время создания заявки. [эти данные есть в данных шары, потому для экономии трафика и памяти, можно получать их по хэшу шары]
	5) Данные продажи:
		5.1] Валюта
		5.2] Value
		5.3] Кошелек
	6) Данные покупки:
		6.1] Валюта
		6.2] Value
		6.3] Кошелек
	7) Время жизни заявки, указывается в количестве шар. [если 0, то это inf]
	8) Данные продавца:
		8.1] public key
	9) Данные покупателя:
		8.2] public key
	10)Состояние заявки.
3. Данные отправляются параллельно данным шары по обновленному протоколу, только обновленным нодам.
____

Hardfork:
1. Bob желает сделать заявку на продажу и пишет команду создания заявки, указывая обязательные параметры.
2. p2pool создает dict по указанным параметрам. Данные dict:
	1) Хэш предыдущей шары с заявкой [если поле пустое, то это первичная заявка продавца]
	2) Хэш самой заявки [это поле не хэшируется, а идёт отдельно]
	3) Данные продажи:
		3.1] Валюта
		3.2] Value
		3.3] Кошелек
	4) Данные покупки:
		4.1] Валюта
		4.2] Value
		4.3] Кошелек
	5) Время жизни заявки, указывается в количестве шар. [если 0, то это inf]
	6) Данные продавца:
		6.1] public key
	7) Данные покупателя:
		7.1] public key
	8)Состояние заявки.
3. Данные являются частью шары и отправляются по основному протоколу. Не обновленные ноды генерируют ошибку, если получают эту шару.

____
Проблемы: 
1) Как обеспечить постоянство хэша заявки? Т.е. его неизменность в ходе добавления данных.


Идеи:
1. Шары с ответной заявкой, которая ссылается на заявку, которая уже имеет ответную — отклоняются нодами и не помещаются в шарчейн.