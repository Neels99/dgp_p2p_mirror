Создание заявки и помещение её в шарчейн, установка параметра времени жизни заявки.

1. Bob желает сделать заявку на продажу и делает это через web статистику какой-нибудь ноды в пуле.
2. Bob вводит параметры заявки через веб интерфейс, после чего через браузер запускается javascript код, который "майнит шару".
3. Когда Bob находит шару, он отправляет её вместе с заявкой ноде[Node], которая является владельцем web статистики.
4. Node проверяет шару на её действительность, после чего помещает шару и заявку в шарчейн, где dict с данными заявки состоит из:
	1) Хэш предыдущей шары с заявкой [если поле пустое, то это первичная заявка продавца]
	2) Хэш текущей шары.
	3) Хэш самой заявки [это поле не хэшируется, а идёт отдельно]
	4) Время создания заявки. [эти данные есть в данных шары, потому для экономии трафика и памяти, можно получать их по хэшу шары]
	5) Данные продажи:
		5.1] Валюта
		5.2] Value
		5.3] Кошелек
	6) Данные покупки:
		6.1] Валюта
		6.2] Value
		6.3] Кошелек
	7) Время жизни заявки, указывается в количестве шар. [если 0, то это inf]
	8) Данные продавца:
		8.1] public key [которым покупатель потом подписывает кошелек(транзакцию)]
	9) Данные покупателя:
		8.2] public key
	10)Состояние заявки.
6. Данные отправляются параллельно данным шары по обновленному протоколу, только обновленным нодам.
____
Проблемы: 
1) Как обеспечить постоянство хэша заявки? Т.е. его неизменность в ходе добавления данных.


Идеи:
1. Шары с ответной заявкой, которая ссылается на заявку, которая уже имеет ответную — отклоняются нодами и не помещаются в шарчейн.